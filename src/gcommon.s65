                .include "../submodules/beeb/include/beeb.s65"

;-------------------------------------------------------------------------

max_gmc_pages=16
max_gedmc_pages=24
max_levels_pages=10

himem=$5800
levels_org=himem-max_levels_pages*256
gmc_org=levels_org-max_gmc_pages*256
gedmc_org=levels_org-max_gedmc_pages*256
                
;-------------------------------------------------------------------------

; TODO should be a 64tass struct or something

level_width=20
level_height=26

LevelData: .struct
name_x: .fill 2
name: .fill 17
colour3: .fill 1
pl_start_x: .fill 1
pl_start_y: .fill 1
map: .fill level_width*level_height
                .endstruct

; for BASIC's benefit. Don't know how to get 64tass to export these.
LevelData_name_x_offset=LevelData.name_x
LevelData_name_offset=LevelData.name
LevelData_colour3_offset=LevelData.colour3
                
; level_data_size=level_width*level_height
; level_name_x_offset=level_data_size
; level_name_offset=level_name_x_offset+2
; level_colour3_offset=level_name_offset+17
; level_pl_start_offset=level_colour3_offset+
; level_total_data_size=level_data_size+
                
;-------------------------------------------------------------------------

num_speeds=20
                
type_blank={.index:0,.char:9,.colour:3}
type_lblock={.index:1,.char:$e2,.colour:3}
type_rblock={.index:2,.char:$e3,.colour:3}
type_block={.index:3,.char:$e0,.colour:3,}
type_spikes={.index:4,.char:$e4,.colour:1,}
type_spring_upper={.index:5,.char:$e1,.colour:1,}
type_spring_lower={.index:6,.char:$e5,.colour:1,}
type_dots={.index:7,.char:$f3,.colour:2,}
type_pill={.index:8,}
type_conveyor={.index:9,}
type_platform={.index:10}
type_spider={.index:30}
type_spider2={.index:50}

speed_edef: .function prefix,speed
                .cerror !(speed>=0 && speed<num_speeds)
                .endfunction format('%s%c',prefix,char(speed>=0 && speed<10?'0'+speed:'a'+speed-10))
                
ghouls_level_enc: .encode
                .edef '__',type_blank.index
                .edef '\\',type_lblock.index
                .edef '//',type_rblock.index
                .edef '||',type_block.index
                .edef 'XX',type_spikes.index
                .edef 'SU',type_spring_upper.index
                .edef 'SL',type_spring_lower.index
                .edef '..',type_dots.index
                .edef '()',type_pill.index
                .edef '<<',type_conveyor.index

                .for _i:=0,_i<num_speeds,_i+=1
                .edef speed_edef('=',_i),type_platform.index+_i
                .edef speed_edef('S',_i),type_spider.index+_i
                .edef speed_edef('T',_i),type_spider2.index+_i
                .endfor
                
                .endencode

flags_ghosts=$80                ;shown when GO>0
flags_add8=$40                  ;add 8 to screen address
flags_speed_mask=$1f
                
;-------------------------------------------------------------------------

ed_flags1_width2=$80             ;width=1 if clear
ed_flags1_height2=$40            ;height=1 if clear
ed_flags1_masked=$20
ed_flags1_speed_mask=$1f

ed_flags2_repeat=$80

; ed_get_flags1: .function width,height,masked,speed
;                 .cerror !(width==1||width==2),'bad width'
;                 .cerror !(height==1||height==2),'bad height'
;                 .cerror !(speed>=-1&&speed<num_speeds),'bad speed'
;                 .endfunction (width==2?ed_flags1_width2:0)|(height==2?ed_flags1_height2:0)|(masked?ed_flags1_masked:0)|(1+speed)
                
; ed_flags2_repeat_add=$80
; ed_get_flags2: .function repeat
;                 .endfunction (repeat?ed_flags2_repeat:0)

