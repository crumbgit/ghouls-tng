                .include "gcommon.s65"

;-------------------------------------------------------------------------

L0070=$70
L0071=$71
L0072=$72
L0074=$74
L0075=$75
L0076=$76
L0077=$77
L0078=$78
L0079=$79
platform_addr=$7a
L007C=$7c
L007E=$7e
L007F=$7f
conveyor_addr=$80
spider_addr=$82
level_draw_ptr=$84
L0084=$84
L0085=$85
level_draw_screen_addr=$86
ed_read_addr=$88
ed_level_addr=$8a
ed_write_addr=$8c

;-------------------------------------------------------------------------

                .if editor
*=gedmc_org
                .else
*=gmc_org
                .endif

;-------------------------------------------------------------------------

gmc_start:
                
                .if editor
                ; For use from BASIC. These are absolutely not in any
                ; rational order.
                .dword reset_envelopes          ;+0
                .dword ed_test                  ;+4
                .dword ed_read_level            ;+8
                .dword ed_read_addr             ;+12
                .dword ed_level_addr            ;+16
                .dword ed_write_addr            ;+20
                .dword ed_get_screen_write_addr ;+24
                .dword ed_draw_level            ;+28
                .dword ed_place_item            ;+32
                .dword ed_draw_item             ;+36
                .dword ed_erase_item            ;+40
                .dword ed_get_item_speed        ;+44
                .dword ed_get_item_index        ;+48
                .endif

sprite_blank:
                .fill 16,0
sprite_block:
                .byte %11111111
                .byte %00010001
                .byte %11111111
                .byte %01100110
                .byte %01100110
                .byte %11111111
                .byte %00010001
                .byte %11111111
                .byte %11111111
                .byte %10001000
                .byte %11111111
                .byte %01100110
                .byte %01100110
                .byte %11111111
                .byte %10001000
                .byte %11111111
sprite_spring_row0:
                .byte %00001010
                .byte %00001111
                .byte %00000000
                .byte %00000111
                .byte %00001000
                .byte %00000111
                .byte %00000000
                .byte %00000111
                .byte %00001010
                .byte %00001100
                .byte %00000010
                .byte %00001001
                .byte %00000101
                .byte %00001110
                .byte %00000010
                .byte %00001001
sprite_lblock:
                .byte %11111111
                .byte %10011001
                .byte %01110111
                .byte %01100110
                .byte %00100010
                .byte %00110011
                .byte %00010001
                .byte %00000000
                .byte %11111111
                .byte %10001000
                .byte %11111111
                .byte %01100110
                .byte %01100110
                .byte %11111111
                .byte %10001000
                .byte %01110111
sprite_rblock:
                .byte %11111111
                .byte %00010001
                .byte %11111111
                .byte %01100110
                .byte %01100110
                .byte %11111111
                .byte %00010001
                .byte %11111111
                .byte %11111111
                .byte %10011001
                .byte %11101110
                .byte %01100110
                .byte %01000100
                .byte %11001100
                .byte %10001000
                .byte %00000000
sprite_spikes:
                .byte %00001001
                .byte %00001001
                .byte %00001001
                .byte %00001101
                .byte %00001101
                .byte %00000101
                .byte %00000101
                .byte %00001111
                .byte %00001001
                .byte %00001001
                .byte %00001001
                .byte %00001011
                .byte %00001011
                .byte %00001010
                .byte %00001010
                .byte %00001111
sprite_spring_row1:
                .byte %00001000
                .byte %00000111
                .byte %00000000
                .byte %00000111
                .byte %00001000
                .byte %00000111
                .byte %00001000
                .byte %00000111
                .byte %00000101
                .byte %00001110
                .byte %00000010
                .byte %00001001
                .byte %00000101
                .byte %00001110
                .byte %00000001
                .byte %00001110
sprite_dots:
                .byte %00000000
                .byte %00000000
                .byte %00000000
                .byte %00000000
                .byte %00110000
                .byte %00110000
                .byte %00000000
                .byte %00000000
                .byte %00000000
                .byte %00000000
                .byte %00000000
                .byte %00000000
                .byte %00110000
                .byte %00110000
                .byte %00000000
                .byte %00000000
                
sprite_pl_right_0:.byte 0, $30, $70, $50,$F0,$E0,$F0, $70, 0, 0, $80,$C0, $80, 0, 0,$C0, $70, $30, $30, $20, $20,$C0, $80, 0, $80, 0, $80, $80,$C0, $80, 0, 0; 0
sprite_pl_right_1:.byte 0, 0, $10, $10, $30, $30, $30, $10, 0,$C0,$E0, $60,$F0, $80,$F0,$E0, $10, 0, 0, 0, 0, 0, 0, 0,$E0,$C0,$C0,$C0,$C0, $80, $80,$C0; 0
sprite_pl_left_0:.byte 0, 0, $10, $30, $10, 0, 0, $30, 0,$C0,$E0,$A0,$F0, $70,$F0,$E0, $10, 0, $10, $10, $30, $10, 0, 0,$E0,$C0,$C0, $40, $40, $30, $10, 0; 0
sprite_pl_left_1:.byte 0, $30, $70, $60,$F0, $10,$F0, $70, 0, 0, $80, $80,$C0,$C0,$C0, $80, $70, $30, $30, $30, $30, $10, $10, $30, $80, 0, 0, 0, 0, 0, 0, 0; 0
sprite_pl_facing:.byte $10, $30, $10, $70, $40, $60, $30, $30, $80,$C0, $80,$E0, $20, $60,$C0,$C0, $10, $20, $20, $20, $20, $20, $20, $60, $80, $40, $40, $40, $40, $40, $40, $60; 0
sprite_spider_0_row0:.byte 0, 0, 1, 3, $11, 3, 6, $37, 0, 0, $6E, $77, $77,$FF,$DF,$DF, 0, 0, $67,$EE,$EE,$FF,$BF,$BF, 0, 0, 8, $C, $88, $C, 6,$CE; 0
sprite_spider_0_row1:.byte $33, $13, $17, $15, 5, 1, 0, 0, $57, $77, $77, 2, 2, 9, 8, 8,$AE,$EE,$EE, 4, 4, 9, 1, 1,$CC, $8C, $8E, $8A, $A, 8, 0, 0; 0
sprite_floating_platform:.byte $FF,$FF, $9E, $9E, $56, 7, 8, 8,$FF,$CF,$C3,$CF,$DE, $2C, $1E, 3,$FF, $3F, $3C, $3F,$B7, $43, $87, $C,$FF,$FF, $97, $97,$A6, $E, 1, 1; 0
sprite_goal_row0:.byte $D,$FF, $60,$F0, $58, $1E, $F, $F, $20,$D0,$F0,$A0, $70,$D0, $F, $3C, $50,$E0,$B0,$D0, $70,$A0, $F, $87, 0,$C0,$A0, $70,$C1, $87, $F, $F; 0
sprite_goal_row1:.byte $3F, $5C, $6C, $5C, $3F, $F, 7, 1, $3C,$BD,$BD,$BC, $3C, $2D, $2D, $F,$C3,$DB,$DB,$D3, $87, $F, $F, $F,$CF,$A3, $63,$A3,$CF, $F, $E, 8; 0
sprite_conveyor:.byte 0, 0, 0, 0, 0, 0, 0, 0,$FF,$AA, $55, $55,$AA,$AA,$FF, 0; 0
sprite_pl_die_8:.byte 0, $40, $20,$C0, 0, $20, $50, $10, $80,$A0, $40, 0, $30, $40, $20, 0; 0
sprite_pl_splat:.byte 0, 0, 0, $20, $90, $70,$E0,$F0, 0, 0, 0, $40,$C0,$A0,$D0,$F0; 0
sprite_spider_1_row0:.byte $C, $17, $11, 0, $17, $C, $33, $77, 0, 0,$CC, $55,$FF,$FF,$DF,$DF, 0, 0, $33,$AA,$FF,$FF,$BF,$BF, 3, $8E, $88, 0, $8E, 3,$CC,$EE; 0
sprite_spider_1_row1:.byte $55, $5D, $19, $1B, $A, 2, 2, 2, $57, $77, $77, 2, 2, 4, 4, 0,$AE,$EE,$EE, 4, 4, 2, 2, 0,$AA,$AB, $89, $8D, 5, 4, 4, 4; 0
sprite_power_pill:.byte 0, 0, $10, $21, $21, $21, $10, 0, 0, 0, $80, $48, $48, $48, $80, 0; 0
sprite_ghost_angry_row0:.byte 3, 7, 7, $69, $49, $49, $F, $F, $C, $E, $E, $69, $29, $29, $F, $F; 0
sprite_ghost_angry_row1:.byte $E, 4, 4, 5, 3, 3, 3, $F, 7, 3, 2, $A, $E, $C, $C, 0; 0
sprite_ghost_happy_row0:.byte 3, 7, 7, $49, $49, $69, $F, $F, $C, $E, $E, $29, $29, $69, $F, $F; 0
sprite_ghost_happy_row1:.byte $D, 5, 4, 6, 3, $B, $F, 7, $B, $B, 2, 6, $E, $C, $C, 8; 0
sprite_pl_die_0:.byte $10, $30, $30, $70, $70, $30, $30, $10, $80,$C0,$C0,$E0,$E0,$C0,$C0, $80; 0
sprite_pl_die_1:.byte 0, $20, $20, $60, $70, $30, $30, $10, 0, $40, $40, $60,$E0,$C0,$C0, $80; 0
sprite_pl_die_2:.byte 0, 0, $40, $60, $70, $30, $30, $10, 0, 0, $20, $60,$E0,$C0,$C0, $80; 0
sprite_pl_die_3:.byte 0, 0, 0, 0, $70, $30, $30, $10, 0, 0, 0, 0,$E0,$C0,$C0, $80; 0
sprite_pl_die_4:.byte 0, 0, 0, 0, $30, $70, $30, $10, 0, 0, 0, 0,$C0,$E0,$C0, $80; 0
sprite_pl_die_5:.byte 0, 0, 0, 0, $10, $10, $10, $10, 0, 0, 0, 0, $80, $80, $80, $80; 0
sprite_pl_die_6:.byte 0, 0, 0, 0, $10, $10, 0, 0, 0, 0, 0, 0, $80, $80, 0, 0; 0
sprite_pl_die_7:.byte 0, 0, $20, $10, $10, $20, 0, 0, 0, 0, $40, $80, $80, $40, 0, 0; 0
sprite_alt_goal_row1:.byte $69, $3C, $3C, $69, $F, $F, 7, 0, $3E, $2F, $2F, $3F, $3E, $2F, $2D, $F,$C7, $4F, $4F,$CB, $87, $F, $F, $F, $69,$C3,$C3, $69, $F, $F, $E, 0; 0

envelope: .macro n,len,pcr1,pcr2,pcr3,pl1,pl2,pl3,aacr,dacr,sacr,racr,atl,dtl
                .byte \n
                .char \len
                .char \pcr1,\pcr2,\pcr3
                .byte \pl1,\pl2,\pl3
                .char \aacr,\dacr,\sacr,\racr
                .char \atl,\dtl
                .endmacro
                
envelopes:
                .envelope 1,1,0,0,0,0,0,200,0,0,0,-2,126,0
                .envelope 2,2,1,-1,1,2,4,2,1,0,0,-1,100,0
                .envelope 3,3,20,-20,8,5,5,5,0,0,0,-1,110,0
                .envelope 4,2,0,0,0,0,0,255,3,0,0,-126,127,0 
                
; footstep
L0AC0:
                .word $11       ; channel
                .word $FFF1     ; amplitude
                .word $FF       ; pitch
                .word 0         ; duration

; jump?
L0AC8:                         
                .word $10; channel
                .word 1         ; amplitude
                .word 2         ; pitch
                .word 1         ; duration
; low beep
L0AD0:
                .word $13; channel
                .word $FFF1     ; amplitude
                .word 0         ; pitch
                .word 3         ; duration

; spooky background noise
L0AD8:
                .word $12; channel
                .word 2         ; amplitude
                .word 5         ; pitch
                .word $32       ; duration

; dot eaten
L0AE0:
                .word $13; channel
                .word 3         ; amplitude
                .word $30       ; pitch
                .word 5         ; duration
                .byte 0
                .byte 0
bonus_update_timer:.byte 2
spider_speed: .byte $C
spider_update_timer: .byte $4D
L0AED: .byte 1
L0AEE: .byte 0
conveyor_direction: .byte 1
L0AF0: .byte $4D
L0AF1: .byte 1
L0AF2: .byte $3C
L0AF3: .byte 0
L0AF4: .byte $85
platform_speed:.byte 6
             .byte 1
L0AF7: .byte $B0
L0AF8: .byte $72
platform_update_timer:.byte 1
platform_direction: .byte 0
unknown_update_1_timer:.byte 2
L0AFC: .byte 0
player_movement:.byte 2
player_jump_state:.byte 0
player_anim_frame:.byte 0
                
ghosts_table:   .word $6A28
                .word 0
                .word 0
                .word 0
                .byte $48       ; H

; type_chars:
;                 .byte ' '       ;blank
;                 .byte $e2       ;lblock
;                 .byte $e3       ;rblock
;                 .byte $e0       ;block
;                 .byte 

;-------------------------------------------------------------------------

reset_envelopes: .block
                ; level_draw_ptr safe to reuse
                lda #<envelopes
                sta level_draw_ptr
                lda #>envelopes
                sta level_draw_ptr+1

                ldx #4

loop:
                txa
                pha
                
                ldx level_draw_ptr+0
                ldy level_draw_ptr+1
                lda #8          ;define envelope
                jsr osword

                clc
                lda level_draw_ptr+0
                adc #14
                sta level_draw_ptr+0
                bcc +
                inc level_draw_ptr+1
+

                pla
                tax
                dex
                bne loop
                
                rts
                .endblock

;-------------------------------------------------------------------------

ed_item: .function sprite_data,width,height,masked,speed,repeat
                .cerror !(width==1||width==2),'bad width'
                .cerror !(height==1||height==2),'bad height'
                .cerror !(speed>=-1&&speed<num_speeds),'bad speed'
                .endfunction {.sprite_data:sprite_data,.width:width,.height:height,.masked:masked,.speed:speed,.repeat:repeat,}
                
ed_ordinary_item: .function sprite_data,repeat
                .endfunction ed_item(sprite_data,1,1,false,-1,repeat)

ed_speeds_items: .function sprite_data,width,height,masked
_list:=[]
                .for _i:=0,_i<num_speeds,_i+=1
_list..=[ed_item(sprite_data,width,height,masked,_i,false)]
                .endfor
                .endfunction _list

_:=[]
_..=[ed_ordinary_item(0,true)] ;blank
_..=[ed_ordinary_item(sprite_lblock,true)] ;lblock
_..=[ed_ordinary_item(sprite_rblock,true)]  ;rblock
_..=[ed_ordinary_item(sprite_block,true)]   ;block
_..=[ed_ordinary_item(sprite_spikes,false)] ;spikes
_..=[ed_ordinary_item(sprite_spring_row0,false)] ;spring u
_..=[ed_ordinary_item(sprite_spring_row1,false)] ;spring l
_..=[ed_ordinary_item(sprite_dots,true)]        ;dots
_..=[ed_ordinary_item(sprite_power_pill,false)]  ;pill
_..=[ed_item(sprite_conveyor,1,1,false,-1,false)]    ;conveyor
_..=ed_speeds_items(sprite_floating_platform,2,1,false)      ;platform
_..=ed_speeds_items(sprite_spider_0_row0,2,2,false) ;spider
_..=ed_speeds_items(sprite_spider_0_row0,2,2,true) ;spider2
ed_types=_

ed_item_sprite_addrs_lo: .proc
                .for _i=0,_i<len(ed_types),_i+=1
                .byte <ed_types[_i].sprite_data
                .endfor
                .endproc                
                
ed_item_sprite_addrs_hi: .proc
                .for _i=0,_i<len(ed_types),_i+=1
                .byte >ed_types[_i].sprite_data
                .endfor
                .endproc

ed_item_flags1s: .proc
                .for _i=0,_i<len(ed_types),_i+=1
_flags:=0
                .if ed_types[_i].width==2
_flags:=_flags|ed_flags1_width2
                .endif
                .if ed_types[_i].height==2
_flags:=_flags|ed_flags1_height2
                .endif
                .if ed_types[_i].masked
_flags:=_flags|ed_flags1_masked
                .endif
_flags:=_flags|(1+ed_types[_i].speed)
                .byte _flags
                .endfor
                .endproc

ed_item_flags2s: .proc
                .for _i=0,_i<len(ed_types),_i+=1
_flags:=0
                .if ed_types[_i].repeat
_flags:=_flags|ed_flags2_repeat
                .endif
                .byte _flags
                .endfor
                .endproc

;-------------------------------------------------------------------------

ed_test: .proc
                stx level_draw_ptr+0
                sty level_draw_ptr+1
                
                lda #12
                jsr oswrch

                ldx #0          ;no ghosts
                jsr entry_draw_level

                ; Reset ghosts table
                ldx #7
-
                lda #0
                sta ghosts_table,x
                dex
                bpl -
                
                ; Player start pos
                lda #$00
                sta L0070+0
                lda #$7A
                sta L0070+1

                ; ???
                lda #0
                sta L0084

                ; Whatever was behind player previously
                ldy #31
-
                lda (L0070),y
                sta L0DDE,y
                dey
                bpl -

                ; Other OSWRCH setup
                ldx #0
-
                lda test_prints,x
                jsr oswrch
                inx
                cpx #test_prints_end-test_prints
                bne -

                jsr entry_game
                rts

test_prints:
                ; GCOL 0,1
                .byte 18,0,1

                ; MOVE 0,60
                .byte 25,4
                .word 0,60

                ; DRAW 0,952
                .byte 25,5
                .word 0,952

                ; MOVE 1279,60
                .byte 25,4
                .word 1279,60

                ; DRAW 1279,952
                .byte 25,5
                .word 1279,952

                ; MOVE 1080,800
                .byte 25,4
                .word 1080,800
                
                ; DRAW 1080,860
                .byte 25,5
                .word 1080,860
                
                ; GCOL 0,2
                .byte 18,0,2
                
                ; MOVE 0,952
                .byte 25,4
                .word 0,952
                
                ; PLOT 21,1279,952
                .byte 25,21
                .word 1279,952
                
                ; MOVE 1092,864
                .byte 25,4
                .word 1092,864
                
                ; DRAW 1270,864
                .byte 25,5
                .word 1270,864

                ; COLOUR 2
                .byte 17,2
test_prints_end:
                
                .endproc
                
;-------------------------------------------------------------------------

ed_draw_level: .proc

                ldy #0
y_loop:
                ldx #0
x_loop:
                jsr ed_read_level
                jsr ed_draw_item

                inx
                cpx #level_width
                bne x_loop

                iny
                cpy #level_height
                bne y_loop

                rts
                .endproc

;-------------------------------------------------------------------------

ed_next_write_addr_screen_row: .proc
                clc
                lda ed_write_addr+0
                adc #$40
                sta ed_write_addr+0
                lda ed_write_addr+1
                adc #$01
                sta ed_write_addr+1
                rts
                .endproc

;-------------------------------------------------------------------------

ed_add16z: .proc
                clc
                adc 0,x
                sta 0,x
                bcc +
                inc 1,x
+
                rts
                .endproc

;-------------------------------------------------------------------------

ed_place_item: .proc
                pha
                jsr ed_read_level
                jsr ed_erase_item
                pla

                pha
                jsr ed_write_level
                pla
                
                ; Assume the old item was 2x2 and the new is 1x1.
                jsr ed_draw_item

                inx
                jsr ed_read_level
                dex
                bcs +           ;taken if (X+1,Y+0) is out of bounds
                jsr ed_draw_item
+

                iny
                jsr ed_read_level
                bcs +           ;taken if (X+0,Y+1) is out of bounds
                jsr ed_draw_item

                ; since (X+1,Y+0) wasn't out of bounds, and (X+0,Y+1)
                ; wasn't out of bounds, (X+1,Y+1) isn't out of bounds
                ; either.
                inx
                jsr ed_read_level
                jsr ed_draw_item
+
                rts
                .endproc

;-------------------------------------------------------------------------
;
; entry: A = object index
;        C = 0 to increment
;            1 to decrement
;
; exit: A = new object index
                
ed_get_item_index: .proc
                .cerror len(ed_types)==256,'needs a rethink'
                
                bcs sub
add:
                adc #1
                cmp #len(ed_types)
                bcc +
                lda #0
+
                rts

sub:
                sbc #1
                cmp #len(ed_types)
                bcc +
                lda #len(ed_types)-1
+
                rts
                .endproc
                
;-------------------------------------------------------------------------
;
; entry: A = object index
;
; exit: C = 0: A = object speed
;       C = 1: object has no speed
;
ed_get_item_speed: .proc
                tay
                ldx #indexes_end-indexes-1
loop:
                tya
                sec
                sbc indexes,x
                cmp #num_speeds
                bcc got
                dex
                bpl loop
                sec
got:
                rts
                
indexes:
                .byte type_platform.index
                .byte type_spider.index
                .byte type_spider2.index
indexes_end:
                .endproc
                
;-------------------------------------------------------------------------

ed_draw_item: .proc
                clc             ;drawing
                jmp ed_draw_or_erase_item
                .endproc

;-------------------------------------------------------------------------

ed_erase_item: .proc
                sec             ;erasing
                jmp ed_draw_or_erase_item
                .endproc

;-------------------------------------------------------------------------

; preserves X/Y
ed_draw_or_erase_item: .proc
                ror erasing       ;bit 7 set if erasing
                stx xc
                sty yc
                sta itype

                tax
                lda ed_item_flags1s,x
                sta flags1
                lda ed_item_sprite_addrs_lo,x
                sta ed_read_addr+0
                lda ed_item_sprite_addrs_hi,x
                sta ed_read_addr+1

                jsr row

                bit flags1
                bvc done        ;taken if height=1

                ; lda yc
                ; cmp #level_height-1
                ; beq done

                inc yc
                jsr row
                dec yc

done:
                ldx xc
                ldy yc
                rts
                
row:
                ldx xc
                ldy yc
                jsr ed_get_screen_write_addr
                
                jsr do_item_part

                bit flags1
                bpl row_done

                ; lda xc
                ; cmp #level_width-1
                ; beq row_done

do_item_part:
                ldy #15
                lda #0
                bit erasing
                bmi erase_part_loop ;taken if erasing

                ; The blank item doesn't overwrite. 
                lda ed_read_addr+0
                ora ed_read_addr+1
                beq next_column
                
                ldx #0          ;Unmasked mask
                lda flags1
                and #ed_flags1_masked
                beq +           ;taken if unmasked
                ldx #2          ;Masked mask
+
part_loop:
                lda (ed_read_addr),y
                and masks+0,x
                sta (ed_write_addr),y
                dey

                lda (ed_read_addr),y
                and masks+1,x
                sta (ed_write_addr),y
                dey

                bpl part_loop

next_part:
                lda #16
                ldx #ed_read_addr
                jsr ed_add16z

next_column:
                lda #16
                ldx #ed_write_addr
                jsr ed_add16z

row_done:
                rts
                
erase_part_loop:
                sta (ed_write_addr),y
                dey
                bpl erase_part_loop
                bmi next_part

masks:
                .byte $ff,$ff   ;unmasked
                .byte $ff,$00   ;masked

erasing:
                .byte 0
itype:
                .byte 0                
xc:
                .byte 0
yc:
                .byte 0                

flags1:
                .byte 0
                .endproc
                
;-------------------------------------------------------------------------

; preserves X/Y
ed_get_screen_write_addr: .proc
                lda #0
                sta ed_write_addr+0

                sty ed_write_addr+1 ;*256

                tya
                lsr a               ;>*128
                ror ed_write_addr+0 ;<*128
                lsr a               ;>*64
                ror ed_write_addr+0 ;<*64 (C=0)
                
                adc ed_write_addr+1
                sta ed_write_addr+1

                txa
                asl a           ;*2 (0-38)
                asl a           ;*4 (0-76)
                asl a           ;*8 (0-152)
                asl a           ;*16 (0-304)
                bcc +
                inc ed_write_addr+1 ;definitely needed
+
                clc
                adc ed_write_addr+0
                sta ed_write_addr+0
                bcc +
                inc ed_write_addr+1
+

                ; The editor screen starts at (0,0).
                clc
                lda ed_write_addr+1
                adc #$58
                sta ed_write_addr+1
                rts
                .endproc

;-------------------------------------------------------------------------

; preserves X/Y
ed_read_level: .proc
                sty reload_y+1
                jsr ed_prepare_for_level_access
                lda (ed_read_addr),y
reload_y: ldy #$ff
                rts
                .endproc

;-------------------------------------------------------------------------

; preserves A/X/Y
ed_write_level: .proc
                sty reload_y+1
                pha
                jsr ed_prepare_for_level_access
                pla
                sta (ed_read_addr),y ;hmm
reload_y: ldy #$ff
                rts
                .endproc

;-------------------------------------------------------------------------

; sets things up so that (ed_read_addr),Y will access the appropriate
; value in the level.
;
; Returns with C=1 if access out of bounds.
;
; preserves X.
ed_prepare_for_level_access: .proc
                cpx #level_width
                bcs done
                cpy #level_height
                bcs done

                lda #0
                sta ed_read_addr+1

                ; Y*16
                tya
                asl a           ;*2 - 0-50
                asl a           ;*4 - 0-100
                asl a           ;*8 - 0-200
                rol ed_read_addr+1
                asl a           ;*16 - 0-400
                rol ed_read_addr+1
                sta ed_read_addr+0

                ; Y*16+Y*4 = Y*20
                tya
                asl a           ;*2
                asl a           ;*4 (C=0)
                adc ed_read_addr+0
                sta ed_read_addr+0
                bcc +
                inc ed_read_addr+1
+

                clc
                lda ed_read_addr+0
                adc ed_level_addr+0
                sta ed_read_addr+0
                lda ed_read_addr+1
                adc ed_level_addr+1
                sta ed_read_addr+1

                ; This is stupid, but it's going to be too confusing
                ; to call from BASIC otherwise.
                txa
                tay
                clc
done:
                rts
                .endproc

;-------------------------------------------------------------------------
                
entry_draw_level: .block
game_start_y=4
game_start_addr=$5800+game_start_y*320
level_name_y=28

                stx go

                lda #0
                sta conveyor_addr+1
                sta spider_addr+1
                sta platform_addr+1
                
                lda #31
                jsr oswrch
                lda #0
                jsr oswrch
                lda #game_start_y
                jsr oswrch

                lda #<game_start_addr
                sta level_draw_screen_addr+0
                lda #>game_start_addr
                sta level_draw_screen_addr+1

                lda #$ff
                sta colour

                lda #<-level_data_size
                sta counter+0
                lda #>-level_data_size
                sta counter+1

loop:
                ldy #0
                lda (level_draw_ptr),y

                ldx #0
find_loop:
                ldy item_info,x
                cpy #$ff
                beq not_found
                
                cmp item_info,x
                beq found

                inx
                inx
                inx
                jmp find_loop

not_found:
                cmp #type_pill.index
                beq pill

                cmp #type_conveyor.index
                beq conveyor

                cmp #type_platform.index
                bcc +
                cmp #type_platform.index+num_speeds
                bcc platform
+
                
                cmp #type_spider.index
                bcc +
                cmp #type_spider.index+num_speeds
                bcc spider
+

                cmp #type_spider2.index
                bcc +
                cmp #type_spider2.index+num_speeds
                bcc spider2
+
                
next:
                ; pretend it was blank.
                ldx #0
                
found:
                lda #17
                jsr oswrch
                lda item_info+1,x
                jsr oswrch
                lda item_info+2,x
                jsr oswrch

                inc level_draw_ptr+0
                bne +
                inc level_draw_ptr+1
+
                
                clc
                lda level_draw_screen_addr+0
                adc #16
                sta level_draw_screen_addr+0
                bcc +
                inc level_draw_screen_addr+1
+

                inc counter+0
                bne loop
                inc counter+1
                bne loop
                
done:
; The BASIC code ends up clearing a bunch of extra stuff due to
; slightly careless-looking use of !.
                lda #0
                sta spider_addr+2
                sta spider_addr+3
                sta spider_addr+4
                sta platform_addr+2
                sta platform_addr+3
                sta platform_addr+4
                rts

platform:
                sec
                sbc #type_platform.index
                sta platform_speed
                ldx #platform_addr
handle_addr:
                lda level_draw_screen_addr+0
                sta 0,x
                lda level_draw_screen_addr+1
                sta 1,x
                jmp next
                
conveyor:
                ldx #conveyor_addr
                jmp handle_addr
                
pill:
                ldy #15
pill_loop:
                lda sprite_power_pill,y
                sta (level_draw_screen_addr),y
                dey
                bpl pill_loop
                jmp next

spider2:
                ldx go
                beq next
                sec
                sbc #type_spider2.index
                ldx #spider_addr
                jmp handle_addr
                
spider:
                sec
                sbc #type_spider.index
                sta spider_speed
                ldx #spider_addr
                jmp handle_addr

go:
                .byte 0
colour:
                .byte 0
counter:
                .word 0
                .endblock

item_info_entry: .macro item
                .byte \item.index,\item.colour,\item.char
                .endmacro
                
item_info:
                .item_info_entry type_blank
                .item_info_entry type_lblock
                .item_info_entry type_rblock
                .item_info_entry type_block
                .item_info_entry type_spikes
                .item_info_entry type_spring_upper
                .item_info_entry type_spring_lower
                .item_info_entry type_dots
                .byte $ff

; C=0 on exit if found. X refers to item info table entry.
find_item_info: .proc
                ldx #0
loop:
                ldy item_info,x
                cpy #$ff
                beq not_found
                cmp item_info,x
                beq found
                inx
                inx
                inx
                jmp loop
found:
                clc
not_found:
                rts
                .endproc           
;-------------------------------------------------------------------------

; TODO: these two buffers probably need to be consecutive?
L0DDE:       .byte 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, $D, $D, 5, 5, $F; 0
                ; copy of what was under player, row 0?
L0DEE:       .byte $FF, $88,$FF, $66, $66,$FF, $88, $77,$FF, $11,$FF, $66, $66,$FF, $11,$FF; 0
                ; copy of what was under player, row 1?
                .byte 0
                .byte 0
bonus_chars:    .byte 234, 238; 0
                .byte 'E'
                .byte 'S'
                .byte 'T'
                .byte 'S'
                .byte 134
                .byte '1'
                .byte 'G'
                .byte 'H'
                .byte 'O'
                .byte 'S'
                .byte 'T'
                .byte ' '
                .byte ' '
                .byte '$'
score_chars:    .byte 230, 230, 230, 238, 232; 0
                .byte ' '
                .byte ' '
                .byte '$'
                .byte 'R'
                .byte 'O'
                .byte 'B'
                .byte 'O'
                .byte 'T'
                .byte ' '
L0E1E:       .byte ' '
                .byte '$'

;-------------------------------------------------------------------------

entry_game:
                lda #1
                sta L0AED
                sta conveyor_direction
                sta player_anim_frame
                lda #0
                sta L0AEE
                sta player_jump_state
                sta platform_direction
                sta L0AF3
                lda #2
                sta player_movement
                sta unknown_update_1_timer
                sta platform_update_timer
                sta L0AF1
                sta L0AF0
                sta spider_update_timer
                lda #$1F
                sta bonus_update_timer

main_loop:
                lda L0AF4
                adc L0070
                adc platform_addr
                adc L007C
                sta L0AF4
                jsr L0E9F
                jsr L119C
                jsr L1205
                jsr L13A9
                jsr L13E3
                lda #$81        ; INKEY (AUG p153)
                ldx #$C8        ; P
                ldy #$FF        ; keyboard scan
                jsr osbyte
                tya             ; A=$ff if pressed
                beq L0E85

pause_loop:
                lda #$81        ; INKEY (AUG p153)
                ldx #$C9        ; O
                ldy #$FF        ; keyboard scan
                jsr osbyte
                tya
                beq pause_loop

L0E85:
                ldx #$17

L0E87:
                ldy #0

L0E89:
                dey
                bne L0E89
                dex
                bne L0E87
                lda #$81        ; INKEY (AUG p153)
                ldx #$8F        ; ESCAPE
                ldy #$FF        ; keyboard scan
                jsr osbyte
                tya
                beq escape_not_pressed
                rts

;-------------------------------------------------------------------------

escape_not_pressed:
                jmp main_loop

;-------------------------------------------------------------------------

L0E9F: .block

                dec unknown_update_1_timer
                lda unknown_update_1_timer
                beq L0EA8
                rts

;-------------------------------------------------------------------------

L0EA8:
                lda #2
                sta unknown_update_1_timer
                dec bonus_update_timer
                lda bonus_update_timer
                bne L0EBD
                lda #$1F
                sta bonus_update_timer
                jsr update_bonus

L0EBD:
                lda L0070
                sta L0072
                sta L0AF7
                clc
                adc #$40
                sta L0074
                lda L0071
                sta L0072+1
                sta L0AF8
                adc #1
                sta L0075
                jmp L1521
                .endblock

;-------------------------------------------------------------------------

L0ED7:
                jmp L1490

;-------------------------------------------------------------------------

L0EDA:
                lda #0
                sta player_movement
                lda #$81
                ldx #$BD        ; X
                ldy #$FF
                jsr osbyte
                tya
                beq test_z_key
; X pressed
                lda player_movement
                bne L0EF8
                lda #<sprite_pl_right_0
                sta L0078
                lda #>sprite_pl_right_0
                sta L0079

L0EF8:
                lda #1          ; 1=right
                sta player_movement
                jmp L0F1E

;-------------------------------------------------------------------------

test_z_key:
                lda #$81
                ldx #$9E        ; Z
                ldy #$FF
                jsr osbyte
                tya
                beq L0F1E
                lda player_movement
                bne L0F19
                lda #<sprite_pl_left_0
                sta L0078
                lda #>sprite_pl_left_0
                sta L0079

L0F19:
                lda #2          ; 2=left
                sta player_movement

L0F1E:
                lda player_movement
                bne L0F2E
                lda #<sprite_pl_facing
                sta L0078
                lda #>sprite_pl_facing
                sta L0079
                jmp L1158

;-------------------------------------------------------------------------

L0F2E:
                lda player_anim_frame
                eor #1
                sta player_anim_frame
                bne L0F51
; select next anim frame sprite
                lda L0078
                clc
                adc #$20
                sta L0078
                lda L0079
                adc #0
                sta L0079
                lda #7
                ldx #<L0AC0
                ldy #>L0AC0
                jsr osword
                jmp L1158

;-------------------------------------------------------------------------

L0F51:
                lda player_movement
                cmp #2
                beq move_player_left; taken if moving left
                cmp #1
                bne L0F89     ; taken if stationary
; moving right
                lda L0070
                clc
                adc #8
                sta L0070
                lda L0071
                adc #0
                sta L0071
                lda #<sprite_pl_right_0
                sta L0078
                lda #>sprite_pl_right_0
                sta L0079
                jmp L0F89

;-------------------------------------------------------------------------

move_player_left:
                lda L0070
                sec
                sbc #8
                sta L0070
                lda L0071
                sbc #0
                sta L0071
                lda #<sprite_pl_left_0
                sta L0078
                lda #>sprite_pl_left_0
                sta L0079

L0F89:
                ldy #$F

L0F8B:
                lda L0DDE,y  ; copy of what was under player, row 0?
                sta (L0072),y
                lda L0DEE,y  ; copy of what was under player, row 1?
                sta (L0074),y
                dey
                cpy #$FF
                bne L0F8B
                lda L0DDE+5  ; copy of what was under player, row 0?
                cmp #$21
                bne L101C
                lda L0DDE+$C ; copy of what was under player, row 0?
                cmp #$48
                bne L101C
                lda #6
                sta L0AC8+4  ;pitch
                lda #7
                ldx #<L0AC8
                ldy #>L0AC8
                jsr osword
                lda #2
                sta L0AC8+4  ;pitch
                ldy #$F
                lda #0

L0FBF:
                sta (L0072),y
                sta L0DDE,y  ; copy of what was under player, row 0?
                dey
                bne L0FBF
                lda #$64
                sta L0AEE
                ldx #$64
                jsr add_X_to_score
                lda #4
                sta L0AF4    ; ghost index

erase_ghosts_loop:
                ldy L0AF4
                lda ghosts_table,y
                sta L0072
                lda ghosts_table+1,y
                sta L0072+1
                beq erase_ghosts_next; taken if no ghost
                lda L0072
; form screen address for ghost row 1
                clc
                adc #$40
                sta L0074
                lda L0072+1
                adc #1
                sta L0075
                ldy #$F

erase_ghost_loop:
                lda (L0072),y
                cmp sprite_ghost_angry_row0,y
                bne erase_ghost_row1
                lda #0
                sta (L0072),y

erase_ghost_row1:
                lda (L0074),y
                cmp sprite_ghost_angry_row1,y
                bne erase_ghost_next
                lda #0
                sta (L0074),y

erase_ghost_next:
                dey
                cpy #$FF
                bne erase_ghost_loop

erase_ghosts_next:
                dec L0AF4
                dec L0AF4
                lda L0AF4
                cmp #$FE
                bne erase_ghosts_loop

L101C:
                lda L0070
                clc
                adc #$40
                sta L0072
                lda L0071
                adc #1
                sta L0072+1
                lda player_jump_state
                bne L1060
                lda L0070
                clc
                adc #$40
                sta L0072
                lda L0071
                adc #1
                sta L0072+1
                ldy #$F

L103D:
                lda (L0072),y
                cmp #$FF
                beq L104B
                dey
                cpy #$FF
                bne L103D
                jmp L1082

;-------------------------------------------------------------------------

L104B:
                lda L0070
                sec
                sbc #$40
                sta L0070
                lda L0071
                sbc #1
                sta L0071
                ldx #5
                jsr add_X_to_score
                jmp L1082

;-------------------------------------------------------------------------

L1060:
                lda L0072
                clc
                adc #$40
                sta L0072
                lda L0072+1
                adc #1
                sta L0072+1
                ldy #0
                lda (L0072),y
                cmp #$FF
                beq L107D
                ldy #8
                lda (L0072),y
                cmp #$FF
                bne L1082

L107D:
                lda #0
                sta player_jump_state

L1082:
                ldy #$F
                lda (L0074),y
                cmp #$F0
                bne L1092
                lda player_jump_state
                bne L1092
                jmp L158E

;-------------------------------------------------------------------------

L1092:
                lda L0070
                clc
                adc #$40
                sta L0072
                lda L0071
                adc #1
                sta L0072+1
                ldy #$F

L10A1:
                lda (L0070),y
                sta L0DDE,y  ; copy of what was under player, row 0?
                lda (L0072),y
                sta L0DEE,y  ; copy of what was under player, row 1?
                dey
                cpy #$FF
                bne L10A1
                lda L0DDE+4  ; copy of what was under player, row 0?
                cmp #$30
                bne L10DD
                lda #0
                sta L0DDE+4  ; copy of what was under player, row 0?
                sta L0DDE+5  ; copy of what was under player, row 0?
                lda L0085
                clc
                adc #4
                sta L0085
                lda L0085
                sta L0AE0+4  ;pitch
                lda #7
                ldx #<L0AE0
                ldy #>L0AE0
                jsr osword
                clc
                ldx #3
                jsr add_X_to_score
                jmp L10E6

;-------------------------------------------------------------------------

L10DD:
                lda player_anim_frame
                bne L10E6
                lda #0
                sta L0085

L10E6:
                ldy #$F

L10E8:
                lda L0DEE,y  ; copy of what was under player, row 1?
                cmp #8
                beq L1104
                cmp #1
                beq L1104
                lda L0DDE,y  ; copy of what was under player, row 0?
                cmp #8
                beq L1104
                cmp #1
                beq L1104
                dey
                bne L10E8
                jmp L1131

;-------------------------------------------------------------------------

L1104:
                ldy #$F
                lda #0

L1108:
                sta L0DEE,y  ; copy of what was under player, row 1?
                sta L0DDE,y  ; copy of what was under player, row 0?
                dey
                cpy #$FF
                bne L1108
                lda L0AF7
                sta L0070
                lda L0AF8
                sta L0071
                lda #7
                ldx #<L0AC8
                ldy #>L0AC8
                jsr osword
                lda player_anim_frame
                eor #1
                sta player_anim_frame
                jmp L1082

;-------------------------------------------------------------------------

L1131:
                ldy #$F

L1133:
                lda (L0070),y
                beq L114B
                cmp #$10
                bcs L114B

L113B:
                lda L0070
                clc
                adc #$40
                sta L0070
                lda L0071
                adc #1
                sta L0071
                jmp L16B4

;-------------------------------------------------------------------------

L114B:
                lda (L0072),y
                beq L1153
                cmp #$10
                bcc L113B

L1153:
                dey
                cpy #$FF
                bne L1133

L1158:
                lda L0078
                clc
                adc #$10
                sta L0074
                lda L0079
                adc #0
                sta L0075
                lda L0070
                clc
                adc #$40
                sta L0072
                lda L0071
                adc #1
                sta L0072+1
                ldy #$F

L1174:
                lda (L0070),y
                beq L117F
                cmp #$F
                bcs L117F

L117C:
                jmp kill_player_and_drop_caller

;-------------------------------------------------------------------------

L117F:
                lda (L0072),y
                beq L1187
                cmp #$F
                bcc L117C

L1187:
                dey
                cpy #$FF
                bne L1174
                ldy #$F

L118E:
                lda (L0078),y
                sta (L0070),y
                lda (L0074),y
                sta (L0072),y
                dey
                cpy #$FF
                bne L118E
                rts

;-------------------------------------------------------------------------

L119C:       .block
                lda platform_addr+1
                beq L11A9       ;skip if no platform
                dec platform_update_timer
                beq L11AA       ;taken if time to update platform

L11A9:
                rts

;-------------------------------------------------------------------------

L11AA:
                lda platform_speed
                sta platform_update_timer
                ldy #$1F
                lda #0

L11B4:
                sta (platform_addr),y
                dey
                bpl L11B4

L11BB:
                lda platform_direction
                beq move_platform_left
                lda platform_addr
                clc
                adc #8
                sta platform_addr
                lda platform_addr+1
                adc #0
                sta platform_addr+1
                jmp L11DD

;-------------------------------------------------------------------------

move_platform_left:
                lda platform_addr
                sec
                sbc #8
                sta platform_addr
                lda platform_addr+1
                sbc #0
                sta platform_addr+1

L11DD:
                ldy #$1F

L11DF:
                lda (platform_addr),y
                cmp #$FF
                beq change_platform_direction ;taken if it bumped into a wall
                dey
                bpl L11DF
                jmp draw_floating_platform

;-------------------------------------------------------------------------

change_platform_direction:
                lda platform_direction
                eor #1
                sta platform_direction
                jmp L11BB
                .endblock

;-------------------------------------------------------------------------

draw_floating_platform:
                ldy #$1F

L11FA:
                lda sprite_floating_platform,y
                sta (platform_addr),y
                dey
                bpl L11FA
                rts

;-------------------------------------------------------------------------

L1205:       .block

                dec L0AF1
                lda L0AF1
                beq L1210
                jmp L1386

;-------------------------------------------------------------------------

L1210:
                lda L0AEE
                cmp #$55
                bcc L1237
                dec L0AEE
                lda L0AEE
                sta L0AD8+4  ;pitch
                lda #7
                ldx #<L0AD8
                ldy #>L0AD8
                jsr osword
                lda L0AF2
                sta L0AF1
                ldx #5
                jsr add_X_to_score
                jmp L1386

;-------------------------------------------------------------------------

L1237:
                lda #4
                sta L0AF1

L123C:
                ldy L0AF1
                lda ghosts_table,y
                sta L007E
                lda ghosts_table+1,y
                sta L007F
                lda L007E
                sta L0072
                lda L007F
                sta L0072+1
                bne L1256
                jmp L1370

;-------------------------------------------------------------------------

L1256:
                lda L007E
                sec
                sbc #$80
                sta L0074
                lda L007F
                sbc #0
                sta L0075
                lda L0070
                sec
                sbc #$80
                sta L0076
                lda L0071
                sbc #0
                sta L0077

L1270:
                lda L0074
                cmp #$40
                lda L0075
                sbc #1
                bcc L128A
                lda L0074
                sec
                sbc #$40
                sta L0074
                lda L0075
                sbc #1
                sta L0075
                jmp L1270

;-------------------------------------------------------------------------

L128A:
                lda L0076
                cmp #$40
                lda L0077
                sbc #1
                bcc L12A4
                lda L0076
                sec
                sbc #$40
                sta L0076
                lda L0077
                sbc #1
                sta L0077
                jmp L128A

;-------------------------------------------------------------------------

L12A4:
                lda L0074
                cmp L0076
                bne L12AB
                clc

L12AB:
                lda L0075
                sbc L0077
                bcc L12C1
                lda L007E
                sec
                sbc #8
                sta L007E
                lda L007F
                sbc #0
                sta L007F
                jmp L1301

;-------------------------------------------------------------------------

L12C1:
                lda L0074
                cmp L0076
                beq L12D7
                lda L007E
                clc
                adc #8
                sta L007E
                lda L007F
                adc #0
                sta L007F
                jmp L1301

;-------------------------------------------------------------------------

L12D7:
                lda L007E
                cmp L0070
                bne L12DE
                clc

L12DE:
                lda L007F
                sbc L0071
                bcc L12F4
                lda L007E
                sec
                sbc #$40
                sta L007E
                lda L007F
                sbc #1
                sta L007F
                jmp L1301

;-------------------------------------------------------------------------

L12F4:
                lda L007E
                clc
                adc #$40
                sta L007E
                lda L007F
                adc #1
                sta L007F

L1301:
                lda L0072
                clc
                adc #$40
                sta L0074
                lda L0072+1
                adc #1
                sta L0075
                ldy #$F

L1310:
                lda (L0072),y
                cmp sprite_ghost_angry_row0,y
                bne L131B
                lda #0
                sta (L0072),y

L131B:
                lda (L0074),y
                cmp sprite_ghost_angry_row1,y
                bne L1326
                lda #0
                sta (L0074),y

L1326:
                dey
                cpy #$FF
                bne L1310
                lda L007E
                clc
                adc #$40
                sta L0074
                lda L007F
                adc #1
                sta L0075
                ldy #$F

L133A:
                lda (L007E),y
                cmp #$20
                bne L1343
                jmp kill_player_and_drop_caller

;-------------------------------------------------------------------------

L1343:
                cmp #0
                bne L134C
                lda sprite_ghost_angry_row0,y
                sta ($7E),y

L134C:
                lda (L0074),y
                cmp #$20
                bne L1355
                jmp kill_player_and_drop_caller

;-------------------------------------------------------------------------

L1355:
                cmp #0
                bne L135E
                lda sprite_ghost_angry_row1,y
                sta ($74),y

L135E:
                dey
                cpy #$FF
                bne L133A
                ldy L0AF1
                lda L007E
                sta ghosts_table,y
                lda L007F
                sta ghosts_table+1,y

L1370:
                dec L0AF1
                dec L0AF1
                lda L0AF1
                cmp #$FE
                beq L1380
                jmp L123C

;-------------------------------------------------------------------------

L1380:
                lda L0AF2
                sta L0AF1

L1386:
                lda L0AEE
                cmp #$54
                bcs L13A8
                lda L0AF4
                cmp #3
                bcs L13A8
                rol L0AF4
                lda L0AF4
                adc #1
                sta L0AD8+4  ;pitch
                lda #7
                ldx #<L0AD8
                ldy #>L0AD8
                jsr osword

L13A8:
                rts
                .endblock

;-------------------------------------------------------------------------

L13A9:       .block
                dec L0AF0
                beq L13AF

L13AE:
                rts

;-------------------------------------------------------------------------

L13AF:
                lda conveyor_addr+1
                beq L13AE       ;taken if no conveyor on this level
                lda #4
                sta L0AF0
                jsr L156B
                ldy #$F

L13BD:
                lda (conveyor_addr),y
                cmp #$66
                beq L13CB
                dey
                cpy #$FF
                bne L13BD
                jmp draw_conveyor

;-------------------------------------------------------------------------

L13CB:
                lda conveyor_direction
                eor #1
                sta conveyor_direction
                jsr L156B

                ; fall through
                .endblock

draw_conveyor:
                ldy #$F

L13D8:
                lda sprite_conveyor,y
                sta (conveyor_addr),y
                dey
                cpy #$FF
                bne L13D8
                rts

;-------------------------------------------------------------------------

L13E3:       .block
                dec spider_update_timer
                lda spider_update_timer
                beq L13EE

L13EB:
                jmp L148F

;-------------------------------------------------------------------------

L13EE:
                lda spider_addr+1
                beq L13EB
                lda spider_speed
                sta spider_update_timer
                lda spider_addr
                clc
                adc #$40
                sta L0072
                lda spider_addr+1
                adc #1
                sta L0072+1
                lda #0
                ldy #$1F

L1409:
                sta (spider_addr),y
                sta (L0072),y
                dey
                cpy #$FF
                bne L1409

L1412:
                lda L0AED
                beq L1427
                lda spider_addr
                clc
                adc #$40
                sta spider_addr
                lda spider_addr+1
                adc #1
                sta spider_addr+1
                jmp L1434

;-------------------------------------------------------------------------

L1427:
                lda spider_addr
                sec
                sbc #$40
                sta spider_addr
                lda spider_addr+1
                sbc #1
                sta spider_addr+1

L1434:
                lda spider_addr
                clc
                adc #$40
                sta L0072
                lda spider_addr+1
                adc #1
                sta L0072+1
                ldy #$1F

L1443:
                lda (L0072),y
                cmp #$FF
                beq L1457
                cmp #$a0
                beq L1457
                lda (spider_addr),y
                cmp #$FF
                beq L1457
                cmp #$a0
                beq L1457
                dey
                cpy #$FF
                bne L1443
                jmp L1462

;-------------------------------------------------------------------------

L1457:
                lda L0AED
                eor #1
                sta L0AED
                jmp L1412

;-------------------------------------------------------------------------

L1462:
                lda L0084
                eor #1
                sta L0084
                beq L147E
                ldy #$1F

L146C:
                lda sprite_spider_0_row0,y
                sta (spider_addr),y
                lda sprite_spider_0_row1,y
                sta (L0072),y
                dey
                cpy #$FF
                bne L146C
                rts

;-------------------------------------------------------------------------

L147E:
                ldy #$1F

L1480:
                lda sprite_spider_1_row0,y
                sta (spider_addr),y
                lda sprite_spider_1_row1,y
                sta (L0072),y
                dey
                cpy #$FF
                bne L1480

L148F:
                rts
                .endblock

;-------------------------------------------------------------------------

L1490:
                lda L0070
                clc
                adc #$80
                sta L0076
                lda L0071
                adc #2
                sta L0077
                ldy #0
                lda (L0076),y
                cmp #$A
                beq L14AD
                ldy #8
                lda (L0076),y
                cmp #$A
                bne L14CA

L14AD:
                lda #6
                sta player_jump_state
                lda #1
                sta L0AC8+4  ;pitch
                lda #7
                ldx #<L0AC8
                ldy #>L0AC8
                jsr osword
                lda #2
                sta L0AC8+4  ;pitch
                ldx #3
                jsr add_X_to_score

L14CA:
                ldy #0
                lda (L0076),y
                cmp #$FF
                beq L14FA
                ldy #8
                lda (L0076),y
                cmp #$FF
                beq L14FA
                lda L0070
                clc
                adc #$40
                sta L0070
                lda L0071
                adc #1
                sta L0071
                jsr L166B
                inc L0AFC
                lda L0AFC
                cmp #4
                bne L14F7
                jmp L16B4

;-------------------------------------------------------------------------

L14F7:
                jmp L0F89

;-------------------------------------------------------------------------

L14FA:
                lda player_jump_state
                bne L1519    ; taken if already jumping
                lda #$81        ; INKEY
                ldx #$B6        ; RETURN
                ldy #$FF
                jsr osbyte
                tya
                beq L1519    ; taken if not pressed
                lda #4
                sta player_jump_state
                lda #7
                ldx #<L0AC8
                ldy #>L0AC8
                jsr osword

L1519:
                lda #0
                sta L0AFC
                jmp L0EDA

;-------------------------------------------------------------------------

L1521:
                lda player_jump_state
                bne L1529
                jmp L0ED7

;-------------------------------------------------------------------------

L1529:
                lda player_anim_frame
                eor #1
                sta player_anim_frame
                lda player_anim_frame
                beq L1539
                jmp L1158

;-------------------------------------------------------------------------

L1539:
                lda player_jump_state
                cmp #3
                bcc L154D    ; taken if 0/1/2
; player_jump_state>=3 - move player up 1 row
                lda L0070
                sec
                sbc #$40
                sta L0070
                lda L0071
                sbc #1
                sta L0071

L154D:
                lda player_jump_state
                cmp #1
                beq L1558
                cmp #2
                bne L1565
;player_jump_state<3 - move player down 1 row

L1558:
                lda L0070
                clc
                adc #$40
                sta L0070
                lda L0071
                adc #1
                sta L0071

L1565:
                dec player_jump_state
                jmp L0F51

;-------------------------------------------------------------------------

L156B:       .block
                lda conveyor_direction
                beq L1580
                lda conveyor_addr
                clc
                adc #8
                sta conveyor_addr
                lda conveyor_addr+1
                adc #0
                sta conveyor_addr+1
                jmp L158D

;-------------------------------------------------------------------------

L1580:
                lda conveyor_addr
                sec
                sbc #8
                sta conveyor_addr
                lda conveyor_addr+1
                sbc #0
                sta conveyor_addr+1

L158D:
                rts
                .endblock

;-------------------------------------------------------------------------

L158E:
                lda #$FF
                sta platform_update_timer
                lda L0070
                clc
                adc #$40
                sta L0074
                lda L0071
                adc #1
                sta L0075
                ldy #$F

L15A2:
                lda sprite_pl_facing,y
                sta (L0070),y
                lda sprite_pl_facing+$10,y
                sta (L0074),y
                dey
                cpy #$FF
                bne L15A2
                lda bonus_chars+1
                sec
                sbc #230
                beq L15BD
                tax
                jsr add_X_to_score

L15BD:
                lda bonus_chars
                sec
                sbc #230
                tay
                beq L15DD
                lda #0
                sta L0E1E

L15CB:
                lda L0E1E
                clc
                adc #$A
                sta L0E1E
                dey
                bne L15CB
                ldx L0E1E
                jsr add_X_to_score

L15DD:
                pla
                pla
                rts

;-------------------------------------------------------------------------

update_bonus:   .block
                dec bonus_chars+1
                lda bonus_chars+1
                cmp #229
                bne L15FE
                lda #239
                sta bonus_chars+1
                dec bonus_chars
                lda bonus_chars
                cmp #229
                bne L15FE
                pla
                pla
                jmp kill_player_and_drop_caller

;-------------------------------------------------------------------------

L15FE:
                ldy #1
                lda bonus_chars
                cmp #230
                bne L1617
                lda #$95
                sta L0AD0+4  ;pitch
                lda #7
                ldx #<L0AD0
                ldy #>L0AD0
                jsr osword
                ldy #1

L1617:
                lda #31
                jsr oswrch
                tya
                clc
                adc #18
                jsr oswrch
                lda #1
                jsr oswrch
                lda bonus_chars,y
                jsr oswrch
                dey
                cpy #$FF
                bne L1617
                rts
                .endblock

;-------------------------------------------------------------------------

add_X_to_score: .block
                ldy #4

L1636:
                lda score_chars,y
                clc
                adc #1
                sta score_chars,y
                cmp #240
                bne L164C
                lda #230
                sta score_chars,y
                dey
                jmp L1636

;-------------------------------------------------------------------------

L164C:
                dex
                bne add_X_to_score
                ldy #4

L1651:
                lda #$1F
                jsr oswrch
                tya
                jsr oswrch
                lda #1
                jsr oswrch
                lda score_chars,y
                jsr oswrch
                dey
                cpy #$FF
                bne L1651
                rts
                .endblock

;-------------------------------------------------------------------------

L166B:       .block
                ldx #5

L166D:
                ldy #4

L166F:
                lda score_chars,y
                sec
                sbc #1
                sta score_chars,y
                cmp #229
                bne L1695
                lda #239
                sta score_chars,y
                dey
                cpy #$FF
                bne L166F
                ldy #4
                lda #230

L168A:
                sta score_chars,y
                dey
                cpy #$FF
                bne L168A
                jmp L1698

;-------------------------------------------------------------------------

L1695:
                dex
                bne L166D

L1698:
                ldy #4

L169A:
                lda #$1F
                jsr oswrch
                tya
                jsr oswrch
                lda #1
                jsr oswrch
                lda score_chars,y
                jsr oswrch
                dey
                cpy #$FF
                bne L169A
                rts
                .endblock

;-------------------------------------------------------------------------

L16B4:
                lda #150
                sta L0AD0+4  ;pitch
                lda L0070
                sec
                sbc #$40
                sta L0070
                lda L0071
                sbc #1
                sta L0071

L16C6:
                lda L0070
                clc
                adc #$40
                sta L0072
                lda L0071
                adc #1
                sta L0072+1
                dec L0AD0+4  ;pitch
                lda #7
                ldx #<L0AD0
                ldy #>L0AD0
                jsr osword
                jsr L166B
                ldy #$F

L16E4:
                lda L0DDE,y  ; copy of what was under player, row 0?
                sta (L0070),y
                lda L0DEE,y  ; copy of what was under player, row 1?
                sta (L0072),y
                dey
                cpy #$FF
                bne L16E4
                lda L0070
                clc
                adc #$40
                sta L0070
                lda L0071
                adc #1
                sta L0071
                lda L0070
                clc
                adc #$40
                sta L0072
                lda L0071
                adc #1
                sta L0072+1
                ldy #$F

L170F:
                lda (L0070),y
                sta L0DDE,y  ; copy of what was under player, row 0?
                lda (L0072),y
                sta L0DEE,y  ; copy of what was under player, row 1?
                dey
                cpy #$FF
                bne L170F
                lda L0DEE    ; copy of what was under player, row 1?
                cmp #$FF
                beq draw_pl_splat
                lda L0DEE+8  ; copy of what was under player, row 1?
                cmp #$FF
                beq draw_pl_splat
                lda L0078
                clc
                adc #$10
                sta L0074
                lda L0079
                adc #0
                sta L0075
                ldy #$F

L173B:
                lda (L0078),y
                sta (L0070),y
                lda (L0074),y
                sta (L0072),y
                dey
                cpy #$FF
                bne L173B
                ldx #70

L174A:
                ldy #0

L174C:
                dey
                bne L174C
                dex
                bne L174A
                jmp L16C6

;-------------------------------------------------------------------------

draw_pl_splat:
                ldy #$F

L1757:
                lda sprite_pl_splat,y
                sta (L0070),y
                dey
                cpy #$FF
                bne L1757
                lda #0
                sta L0AD0+4  ;pitch
                pla
                pla
                rts

;-------------------------------------------------------------------------

kill_player_and_drop_caller:
                pla
                pla
                lda L0070
                clc
                adc #$40
                sta L0072
                lda L0071
                adc #1
                sta L0072+1
                ldy #$F

L177A:
                lda L0DDE,y  ; copy of what was under player, row 0?
                sta (L0070),y
                lda sprite_pl_splat,y
                sta (L0072),y
                dey
                cpy #$FF
                bne L177A
                rts

;-------------------------------------------------------------------------

top_right_cell=$5800+39*8
                
entry_slide_off:
                lda #<top_right_cell
                sta L0070
                lda #>top_right_cell
                sta L0071
                lda #1
                sta L0072

slide_off_loop:
                lda #19
                jsr osbyte

                lda #13
                sta $fe00
                lda L0072
                sta $fe01
                
                lda L0070
                clc
                adc #8
                sta L0070
                bcc +
                inc L0071
+
                lda L0070
                pha
                lda L0071
                pha
; clear portion of screen just scrolled off
                ldx #32

fill_rows_loop:
                ldy #7
                lda #0

fill_row_loop:
                sta (L0070),y
                dey
                cpy #$FF
                bne fill_row_loop
                lda L0070
                clc
                adc #$40
                sta L0070
                lda L0071
                adc #1
                sta L0071
                dex
                bne fill_rows_loop
                pla
                sta L0071
                pla
                sta L0070
                inc L0072
                lda L0072
                cmp #41
                bne slide_off_loop
                rts

;-------------------------------------------------------------------------

                .if editor
                .cerror *-gmc_start>max_gedmc_pages*256,"gedmc overflow"
                .else
                .cerror *-gmc_start>max_gmc_pages*256,"gmc overflow"
                .endif
                